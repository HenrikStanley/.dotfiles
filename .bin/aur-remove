#!/usr/bin/env bash
# aur-remove - remove packages from repository
set -o errexit -o pipefail
shopt -s nullglob
shopt -s extglob
readonly argv0=remove
readonly PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

usage() {
    plain "usage: $argv0 [-d] [long options] [--] pkgname... [-]"
    exit 1
}

source /usr/share/makepkg/util/util.sh
source /usr/share/makepkg/util/message.sh
source /usr/share/makepkg/util/parseopts.sh

if [[ -t 2 && ! -o xtrace ]]; then
    colorize
fi

opt_short='d:'
opt_long=('repo:' 'database:' 'root:')

if ! parseopts "$opt_short" "${opt_long[@]}" -- "$@"; then
    usage
fi
set -- "${OPTRET[@]}"

unset root repo
while true; do
    case "$1" in
        -d|--database|--repo) shift; repo=$1 ;;
        --root)               shift; root=$1 ;;
        --)                   shift; break ;;
    esac
    shift
done
unset opt_short opt_long OPTRET

if [[ ${repo=$AUR_REPO} ]]; then
    server=$(pacconf --single --repo="$repo" Server)
    server=${server#*://}
else
    mapfile -t conf < <(pacconf | conf_file_repo)

    case ${#conf[@]} in
        2) repo=${conf[0]}
           root=${conf[1]#*://} ;;
        0) error "$argv0: no file:// repository found"
           exit 2 ;;
        *) error "$argv0: repository choice is ambiguous (use --repo to specify)"
           printf '%s\n' "${conf[@]}" | paste - - | column -t >&2
           exit 2 ;;
    esac
fi

msg2 "Using [$repo] repository"
root=$(realpath -- "${root-$server}")

if ! [[ -w $root/$repo.db && -r $root/$repo.db ]]; then
    error "$argv0: $repo: permission denied (read-write)"
    exit 13
fi

pkg_list="$(for arg in "$@"; do
      case $arg in
          -) cat ;;
          *) printf '%s\n' "$arg" ;;
      esac
  done
)"

repo-remove "$root/$repo".db.tar "$pkg_list"

# vim: set et sw=4 sts=4 ft=sh:
