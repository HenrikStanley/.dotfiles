#!/usr/bin/env bash

set -o errexit -o pipefail
shopt -s nullglob
readonly argv0=rebuild
readonly XDG_CACHE_HOME=${XDG_CACHE_HOME:-$HOME/.cache}
readonly AURDEST=${AURDEST:-$XDG_CACHE_HOME/aurutils/sync}
readonly PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

# default arguments
build_args=(-fR)
makechrootpkg_args=(-cu)
makechrootpkg_makepkg_args=()
makepkg_args=(-cs)

# default options (disabled)
chroot=0 install=0

usage() {
    plain "usage: $argv0 [-AcdiT] [long options] [--] pkgname... [-]"
    exit 1
}

source /usr/share/makepkg/util/util.sh
source /usr/share/makepkg/util/message.sh

if [[ -t 2 && ! -o xtrace ]]; then
    colorize
fi

if getopt -T || (($? != 4)); then
    error "$argv0: util-linux getopt required"
    exit 22
fi

longopts=chroot,repo:,database:,root:,ignorearch,ignore-arch,bind:,temp,install
shortopts=d:AcTi

if optstring=$(getopt -o "$shortopts" -l "$longopts" -n "$argv0" -- "$@"); then
    eval set -- "$optstring"
else
    usage
fi

unset root repo
while true; do
    case "$1" in
        -c|--chroot)
            chroot=1
            build_args+=(-c)
            shift ;;
        --bind)
            makechrootpkg_args+=(-D "$2")
            shift 2 ;;
        -T|--temp)
            makechrootpkg_args+=(-T)
            shift ;;
        -A|--ignorearch|--ignore-arch)
            makepkg_args+=(-A)
            makechrootpkg_makepkg_args+=(-A)
            shift ;;
        -d|--database|--repo)
            repo=$2
            shift 2 ;;
        --root)
            root=$2
            shift 2 ;;
        -i|--install)
            install=1
            shift ;;
        *)
            shift
            break ;;
    esac
done

if [[ ${repo=$AUR_REPO} ]]; then
    server=$(pacconf --single --repo="$repo" Server)
    server=${server#*://}
else
    mapfile -t conf < <(pacconf | conf_file_repo)

    case ${#conf[@]} in
        2) repo=${conf[0]}
           root=${conf[1]#*://} ;;
        0) error "$argv0: no file:// repository found"
           exit 2 ;;
        *) error "$argv0: repository choice is ambiguous (use --repo to specify)"
           printf '%s\n' "${conf[@]}" | paste - - | column -t >&2
           exit 2 ;;
    esac
fi

msg2 "Using [$repo] repository"
root=$(realpath -- "${root-$server}")

if ! [[ -w $root/$repo.db && -r $root/$repo.db ]]; then
    error "$argv0: $repo: permission denied (read-write)"
    exit 13
fi

pkg_list="$(for arg in "$@"; do
      case $arg in
          -) cat ;;
          *) printf '%s\n' "$arg" ;;
      esac
  done
)"

for pkg in $pkg_list; do
    [[ -z "$pkg" ]] && continue
    pushd "$AURDEST/$pkg" \
        || pushd "$AURDEST/${pkg%-git}" \
        || continue

    build_args+=(-d "$repo" -r "$root")

    if ((chroot)); then
        aur build "${build_args[@]}" -- "${makechrootpkg_args[@]}" \
            -- "${makechrootpkg_makepkg_args[@]}"
    else
        aur build "${build_args[@]}" -- "${makepkg_args[@]}"
    fi

    if ((install)); then
        sudo pacman -S "$pkg"
    fi

    popd || exit 1
done

# vim: set et sw=4 sts=4 ft=sh:
