[user]
	name = Alphonse Mariya
	email = alphonse.mariya@hotmail.com
	signingkey = 24D4C85E7B4585A9

[core]
	editor = vim
	pager = less -S
	whitespace = fix,trailing-space,cr-at-eol
	hooksPath = ~/.config/git/hooks
	excludesfile = ~/.ignore

[credential]
	helper = cache

[color]
	branch = true
	diff = true
	grep = true
	interactive = true
	pager = true
	showBranch = true
	status = true
	ui = true

[color "diff"]
	context = 15
	meta = 4 bold reverse
	frag = 3 bold reverse
	commit = 3 bold
	old = 9
	new = 10
	oldMoved = 8
	newMoved = 14
	whitespace = 1 reverse

[color "decorate"]
	branch = 2 bold
	remoteBranch = 1 bold
	tag = 3 bold
	stash = 5 bold
	HEAD = 6 bold

[color "interactive"]
	prompt = 4 bold
	header = 15 bold
	help = 15
	error = 1

[color "status"]
	header = 15 bold
	added = 14 bold
	changed = 11 bold
	untracked = 9 bold
	branch = 15 bold
	nobranch = 9 bold reverse
	localBranch = 2 bold
	remoteBranch = 1 bold
	unmerged = 1 bold reverse

[commit]
	gpgSign = true

[diff]
	tool = vimdiff
	colorMoved = default
	renames = copy
	wsErrorHighlight = all

[difftool]
	prompt = false

[merge]
	ff = false
	tool = diffconflicts

[rebase]
	missingCommitsCheck = warn
	abbreviateCommands = false

[mergetool "vim-diffconflicts"]
	cmd = vim -c DiffConflicts "$MERGED" "$BASE" "$LOCAL" "$REMOTE"
	trustExitCode = true
	keepBackup = false

[mergetool "diffconflicts"]
	cmd = diffconflicts vim "$BASE" "$LOCAL" "$REMOTE" "$MERGED"
	trustExitCode = true
	keepBackup = false

[mergetool "fugitive"]
	cmd = vim -f -c "Gvdiff" "$MERGED"
	trustExitCode = true
	keepBackup = false

[fetch]
	prune = true

[pull]
	rebase = interactive

[push]
	default = simple
	gpgSign = if-asked
	followTags = true

[submodule]
	fetchJobs = 0

[grep]
	lineNumber = true
	patternType = perl

[interactive]
	singlekey = true

[status]
	short = true
	branch = true
	showStash = true
	submoduleSummary = true

[log]
	abbrevCommit = true
	decorate = short
	date = format:%a, %Y-%m-%d %R (%z)
	graphColors = 1,2,3,4,5,6,8,166,9,10,11,12,13,14,15,208

[rerere]
	enabled = true

[protocol]
	version = 2

[url "git@github.com:"]
	insteadOf = @gh:

[url "git@gitlab.com:"]
	insteadOf = @gl:

[url "git@bitbucket.org:"]
	insteadOf = @bb:

[url "https://github.com/"]
	insteadOf = gh://

[url "https://gitlab.com/"]
	insteadOf = gl://

[url "https://bitbucket.org/"]
	insteadOf = bb://

[url "https://aur.archlinux.org/"]
	insteadOf = aur://

[alias]
	ec = config --global --edit

	# log, current branch
	lg = log --format=format:'%C(auto)%h%C(reset) - %C(italic blue)%ad%C(reset) %C(italic cyan)(%ar)%C(reset)%C(auto)%d%C(reset)%n''%C(black)%h%C(reset)   %C(auto)%s%C(reset) %C(241)- %an%C(reset)%n' --graph
	lgo = log --format='%C(auto)%h%C(reset)%C(auto)%d%C(reset) %C(auto)%s%C(reset) %C(italic blue)%ad%C(reset) %C(241)%an%C(reset)' --graph --date=short
	lgm = log --format=medium --graph
	lgmm = log --format=medium --graph --stat --summary
	lgf = log --format=fuller --graph
	lgff = log --format=fuller --graph --stat --summary

	# log, all branches+tags on all remotes
	la = "!git lg --all"
	lao = "!git lgo --all"
	lam = "!git lgm --all"
	lamm = "!git lgmm --all"
	laf = "!git lgf --all"
	laff = "!git lgff --all"

	# log, all branches+tags on remotes 'origin' and 'upstream'
	l = "!git lg --branches='*' --tags='*' --remotes={origin,upstream}"
	lo = "!git lgo --branches='*' --tags='*' --remotes={origin,upstream}"
	lm = "!git lgm --branches='*' --tags='*' --remotes={origin,upstream}"
	lmm = "!git lgmm --branches='*' --tags='*' --remotes={origin,upstream}"
	lf = "!git lgf --branches='*' --tags='*' --remotes={origin,upstream}"
	lff = "!git lgff --branches='*' --tags='*' --remotes={origin,upstream}"

	lr = "!f() { git log --format=fuller --stat --summary \"${1:-HEAD}\"~..\"${1:-HEAD}\"; }; f"
	ld = log --format=medium --stat --summary --left-right
	lad = log --format=medium --stat --summary --left-right --all
	lp = log --patch --graph -c
	lap = log --patch --graph -c --all
	lw = "!f() { watch -ctn 2 git \"${@:-l --color}\"; }; f"
	rl = reflog

	d = diff -c
	ds = diff --find-renames --stat -c
	dc = diff --cached -c
	dl = diff --cached -c HEAD~
	dr = "!f() { git diff \"${1:-HEAD}\"~..\"${1:-HEAD}\"; }; f"
	grep = grep -Ii

	s = status
	si = status --ignored
	siu = status --ignored --untracked-files

	a = add
	au = add --update
	ai = add --interactive
	ap = add --patch
	c = commit --verbose
	ca = commit --verbose --amend
	can = commit --verbose --amend --no-edit

	co = checkout
	com = checkout master
	cob = checkout -b
	b = branch
	bl = branch --all -vv
	bc = branch --contains
	bd = branch --delete
	bdf = branch --delete --force
	bdr = "!f() { [ \"$#\" -gt 1 ] && REMOTE=\"$1\" && shift; git push \"${REMOTE:-origin}\" --delete \"$1\"; }; f"
	bt = "!f() { CURRENT=$(git symbolic-ref --short HEAD); git branch --set-upstream-to=\"${1:-origin/$CURRENT}\"; }; f"

	cl = clone
	p = pull
	f = fetch --tags
	fa = fetch --all --tags
	pfa = "!f() { git remote | xargs -I@ -P0 git fetch --tags \"$@\" @; }; f"
	su = submodule update --init --recursive

	pu = push
	pusu = "!f() { CURRENT=$(git symbolic-ref --short HEAD); git push --set-upstream \"${1:-origin}\" \"$CURRENT\"; }; f"

	m = merge
	ma = merge --abort
	mc = merge --continue
	mff = merge --ff-only
	mnc = "!f() { git merge --no-commit --no-ff \"$@\"; EC=$?; git merge --abort; exit $EC; }; f"
	r = rebase
	ra = rebase --abort
	rc = rebase --continue
	rq = rebase --quit
	rs = rebase --skip
	ri = rebase --interactive
	rim = rebase --interactive master
	cp = cherry-pick
	cpa = cherry-pick --abort
	cpc = cherry-pick --continue
	cpq = cherry-pick --quit

	mt = mergetool
	dt = difftool

	re = reset
	rv = revert

	which = branch --contains
	who = shortlog --summary --numbered --no-merges
	whoami = !"git config --get user.name && git config --get user.email"

	# list aliases
	alias = "!git config --get-regexp alias | cut -c 7- | sed -e \"s/^/[1m/\" -e \"s/ /[0m$(echo 2B | xxd -r -p)/\" | column -t -s \"$(echo 2B | xxd -r -p)\" | sort | less -SR "

	# list branches sorted by last modified
	bls = "!git for-each-ref --sort='-authordate' --format='%(authordate)%09%(objectname:short)%09%(refname)' refs/heads | sed -e 's@refs/heads/@@'"

	# initialize repository in current directory
	this = "!git init && git commit --message='Initialize' --allow-empty"

	# open github repository in browser
	open = "!f() { URL=$(git config remote.\"${1:-origin}\".url); xdg-open \"${URL%%.git}\"; }; f"

	# hard reset with commit before (use reflog to restore)
	wipe = "!f() { git add --all && git commit --quiet --message='WIPE-SAVEPOINT' && git reset \"${1:-HEAD~}\" --hard; }; f"

	# hard reset and clean
	nuke = !"git reset --hard HEAD && git clean -fd"

	# set up remotes for fork
	fork = "!f() { URL=$(git config remote.\"${1:-origin}\".url); git remote set-url \"${1:-origin}\" \"$(echo \"$URL\" | perl -pe 's/(?<=[:\\/])[^:\\/]+(?=\\/[^\\/]+$)/alfunx/')\"; git remote add \"${2:-upstream}\" \"$URL\"; }; f"

	# get gitignore from github/gitignore.git
	gitignore = "!f() { [ -f .gitignore ] && echo >> .gitignore; curl -f \"https://raw.githubusercontent.com/github/gitignore/master/${1}.gitignore\" | tee -a .gitignore; }; f"

	# generate tags file
	ctags = "!$HOME/.config/git/hooks/ctags"

	# fzf commands (custom)
	fbr = fzf-branch
	fco = fzf-checkout
	fcoc = fzf-checkout-commit
	fsha = fzf-print-sha
	fshow = fzf-show-commit
	fstash = fzf-show-stash

[svn]
	rmdir = true
