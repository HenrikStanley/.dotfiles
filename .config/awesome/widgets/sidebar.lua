--[[

     Licensed under GNU General Public License v2
      * (c) 2017, Alphonse Mariyagnanaseelan

--]]

local awful = require("awful")
local beautiful = require("beautiful")
local naughty = require("naughty")
local gears = require("gears")
local wibox = require("wibox")
local lain = require("lain")

local markup = lain.util.markup

-- local debug = false

local function factory(context, args)

    -- local args = args or { }
    -- local timeout = args.timeout or 1800
    -- local settings = args.settings or function() end
    -- local font = context.util.font
    --
    -- args.x = args.x or beautiful.sidebar_x or 0
    -- args.y = args.y or beautiful.sidebar_y or 0
    -- args.bg = args.bg or beautiful.sidebar_bg or beautiful.tasklist_bg_normal or "#000000"
    -- args.fg = args.fg or beautiful.sidebar_fg or beautiful.tasklist_fg_normal or "#FFFFFF"
    -- args.opacity = args.opacity or beautiful.sidebar_opacity or 1
    -- args.height = args.height or beautiful.sidebar_height or awful.screen.focused().geometry.height
    -- args.width = args.width or beautiful.sidebar_width or 400
    -- args.radius = args.radius or beautiful.border_radius or 0
    -- args.mouse_toggle = args.mouse_toggle or beautiful.sidebar_mouse_toggle
    --
    -- local sidebar = wibox {
    --     x = args.x,
    --     y = args.y,
    --     bg = args.bg,
    --     fg = args.fg,
    --     opacity = args.opacity,
    --     height = args.height,
    --     width = args.width,
    --     visible = false,
    --     ontop = true,
    --     type = "dock",
    -- }
    --
    -- if beautiful.sidebar_position == "right" then
    --     sidebar.x = awful.screen.focused().geometry.width - sidebar.width
    --     sidebar.shape = function(cr, width, height)
    --         gears.shape.partially_rounded_rect(cr, width, height, true, false, false, true, args.radius)
    --     end
    -- else
    --     sidebar.x = 0
    --     sidebar.shape = function(cr, width, height)
    --         gears.shape.partially_rounded_rect(cr, width, height, false, true, true, false, args.radius)
    --     end
    -- end
    --
    -- sidebar:buttons(gears.table.join(
    --     awful.button({ }, 2, function ()
    --         sidebar.hide()
    --     end)
    -- ))
    --
    -- -- Hide sidebar when mouse leaves
    -- if args.mouse_toggle then
    --     sidebar:connect_signal("mouse::leave", function ()
    --         sidebar.hide()
    --     end)
    -- end
    --
    -- -- Activate sidebar by moving the mouse at the edge of the screen
    -- if args.mouse_toggle then
    --     local sidebar_activator = wibox {
    --         y = 0,
    --         width = 1,
    --         height = awful.screen.focused().geometry.height,
    --         visible = true,
    --         ontop = true,
    --         opacity = 0,
    --         below = true,
    --     }
    --
    --     sidebar_activator:connect_signal("mouse::enter", function ()
    --         sidebar.show()
    --     end)
    --
    --     if beautiful.sidebar_position == "right" then
    --         sidebar_activator.x = awful.screen.focused().geometry.width - sidebar_activator.width
    --     else
    --         sidebar_activator.x = 0
    --     end
    --
    --     sidebar_activator:buttons(gears.table.join(
    --         awful.button({ }, 2, function ()
    --             sidebar.toggle()
    --         end),
    --         awful.button({ }, 4, function ()
    --             awful.tag.viewprev()
    --         end),
    --         awful.button({ }, 5, function ()
    --             awful.tag.viewnext()
    --         end)
    --     ))
    -- end
    --
    -- local function pad(size)
    --     local str = ""
    --     for i = 1, size do
    --         str = str .. " "
    --     end
    --     local pad = wibox.sidebar.textbox(str)
    --     return pad
    -- end
    --
    -- -- Font colors
    -- local text_fg = context.colors.bw_9
    -- local symbold_fg = context.colors.bw_9
    --
    -- -- Markup
    -- local symbol = context.util.symbol_markup_function(14, symbol_fg, markup)
    -- local text = context.util.text_markup_function(14, symbol_fg, markup)
    -- local time_text = context.util.markup_function({bold=true, size=30}, text_fg, markup)
    -- local date_text = context.util.markup_function({bold=true, size=18}, text_fg, markup)
    --
    -- -- Store timers
    -- local timers = { }
    --
    -- function sidebar.hide()
    --     sidebar.visible = false
    --     for _, t in pairs(timers) do
    --         t:stop()
    --         if debug then naughty.notify { text = "stop" } end
    --     end
    -- end
    --
    -- function sidebar.show()
    --     sidebar.visible = true
    --     for _, t in pairs(timers) do
    --         t:start()
    --         if debug then naughty.notify { text = "start" } end
    --     end
    -- end
    --
    -- function sidebar.toggle()
    --     if sidebar.visible then
    --         sidebar.hide()
    --     else
    --         sidebar.show()
    --     end
    -- end
    --
    -- -- {{{ TIME
    -- local time
    -- time, timers.time = awful.widget.watch(
    --     -- "date +'%a %d %b %R'", 60,
    --     "date +'%R'", 1,
    --     function(widget, stdout)
    --         if debug then naughty.notify { text = "update" } end
    --         time_text(widget, stdout)
    --     end
    -- )
    -- -- }}}
    --
    -- -- {{{ DATE
    -- local date
    -- date, timers.date = awful.widget.watch(
    --     -- "date +'%a %d %b %R'", 60,
    --     "date +'%A, %d. %B'", 1,
    --     function(widget, stdout)
    --         if debug then naughty.notify { text = "update" } end
    --         date_text(widget, stdout)
    --     end
    -- )
    -- -- }}}
    --
    -- -- Bar sizes
    -- local bar_height = 24
    -- local bar_width  = 200
    --
    -- -- Icon sizes
    -- local icon_size = 30
    --
    -- -- Font colors
    -- local bar_fg = context.colors.bw_5
    -- local bar_bg = context.colors.bw_0
    --
    -- -- {{{ BAT
    -- --luacheck: push ignore widget bat_now
    -- local function bat()
    --     local bat_icon = wibox.widget.textbox()
    --     local bat = wibox.widget {
    --         max_value        = 100,
    --         value            = 0,
    --         forced_height    = bar_height,
    --         forced_width     = bar_width,
    --         paddings         = beautiful.border_width,
    --         color            = beautiful.border_focus,
    --         background_color = beautiful.border_normal,
    --         widget           = wibox.widget.progressbar,
    --     }
    --
    --     local bat_text = lain.widget.bat {
    --         timeout = 100,
    --         notify = "off",
    --         batteries = context.vars.batteries,
    --         ac = context.vars.ac,
    --         settings = function()
    --             if debug then naughty.notify { text = "BAT" } end
    --             local _color = bar_fg
    --
    --             if tonumber(bat_now.perc) <= 10 then
    --                 symbol(bat_icon, "")
    --                 _color = context.colors.red_2
    --             elseif tonumber(bat_now.perc) <= 20 then
    --                 symbol(bat_icon, "")
    --                 _color = context.colors.orange_2
    --             elseif tonumber(bat_now.perc) <= 30 then
    --                 symbol(bat_icon, "")
    --                 _color = context.colors.yellow_2
    --             elseif tonumber(bat_now.perc) <= 50 then
    --                 symbol(bat_icon, "")
    --             elseif tonumber(bat_now.perc) <= 75 then
    --                 symbol(bat_icon, "")
    --             else
    --                 symbol(bat_icon, "")
    --             end
    --
    --             if tonumber(bat_now.perc) <= 3 and not bat_now.ac_status == 1 then
    --                 if not bat_now.notification then
    --                     bat_now.notification = naughty.notify {
    --                         title = "Battery",
    --                         text = "Your battery is running low.\n"
    --                             .. "You should plug in your PC.",
    --                         preset = naughty.config.presets.critical,
    --                         timeout = 0,
    --                     }
    --                 end
    --             end
    --
    --             if bat_now.ac_status == 1 then
    --                 symbol(bat_icon, "")
    --                 if tonumber(bat_now.perc) >= 95 then
    --                     _color = context.colors.green_2
    --                 end
    --             end
    --
    --             bat.value = bat_now.perc
    --             text(widget, bat_now.perc .. "%", _color)
    --         end,
    --     }
    --
    --     local bat_widget = wibox.widget {
    --         {
    --             bat_icon,
    --             widget = wibox.container.place,
    --         },
    --         {
    --             bat,
    --             widget = wibox.container.place,
    --         },
    --         {
    --             bat_text,
    --             widget = wibox.container.place,
    --         },
    --         forced_width = args.width,
    --         layout = wibox.layout.ratio.horizontal,
    --     }
    --     bat_widget:ajust_ratio(2, 0.20, 0.60, 0.20)
    --
    --     bat_widget:buttons(awful.button({ }, 1, function()
    --         awful.spawn.easy_async(context.vars.scripts_dir .. "/show-battery-status", function(stdout, stderr, reason, exit_code)
    --             naughty.destroy(bat_widget.notification)
    --             bat_text.update()
    --             bat_widget.notification = naughty.notify {
    --                 title = "Battery",
    --                 text = string.gsub(stdout, '\n*$', ''),
    --                 timeout = 10,
    --             }
    --         end)
    --     end))
    --
    --     return bat_widget
    -- end
    -- --luacheck: pop
    -- -- }}}
    --
    -- -- Item placement
    -- sidebar:setup {
    --     {
    --         {
    --             {
    --                 {
    --                     time,
    --                     widget = wibox.container.place,
    --                 },
    --                 {
    --                     date,
    --                     widget = wibox.container.place,
    --                 },
    --                 layout = wibox.layout.flex.vertical,
    --             },
    --             widget = wibox.container.place,
    --         },
    --         {
    --             {
    --                 {
    --                     {
    --                         -- bat(),
    --                         -- bat(),
    --                         -- bat(),
    --                         -- bat(),
    --                         -- bat(),
    --                         -- bat(),
    --                         spacing = 20,
    --                         layout = wibox.layout.flex.vertical,
    --                     },
    --                     margins = 20,
    --                     widget = wibox.container.margin,
    --                 },
    --                 layout = wibox.layout.flex.vertical,
    --             },
    --             widget = wibox.container.place,
    --         },
    --         layout = wibox.layout.flex.vertical,
    --     },
    --     right = beautiful.border_width,
    --     color = beautiful.border_focus,
    --     widget = wibox.container.margin,
    -- }
    --
    -- return sidebar

end

return factory
